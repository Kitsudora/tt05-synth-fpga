--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_toivoh_synth.v
  top_module:  "tt_um_toivoh_synth"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x2"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Toivo Henningsson"      # Your name
  title:        "Analog emulation monosynth"           # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "One synth voice with two oscillators and a 2nd order filter"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      TODO: Describe oscillators and filter, PWM

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test: |
      The synth is controlled by writing to its configuration registers:
        - Keep the write strobe low when not writing
        - Set the 4 bit write address, and an 8 bit data value
        - While keeping the address and data stable, bring the write strobe high and then low again
            - The write address and data are sampled at 2-10 cycles after the rising edge of the write strobe

      The output comes in two forms:
        - As a Pulse Width Modulated (PWM) signal.
        - As an 8 bit value on the 8 output pins, that can be reconstructed using a resistor ladder.

      The PWM signal should be simpler to use, but be sure reduce the voltage with a resistive divider or similar
      before connecting it to an audio device.
      **Note:Make sure that you know what you are doing when connecting an audio device to the output.
      Don't apply more than 1 V between the terminals of an audio plug that is connected to line in.
      5 V direct from the chip might damage your audio device.**

      Registers
        - Address 0-1: `osc_period0`, 2-3: `osc_period1`; 2 bytes each
        - Address 4-5: `cutoff_period`, 6-7: `damp_period`, 8-9: `vol_period`; 2 bytes each
        - Address 10-14: `sweep_osc0_period, sweep_osc1_period, sweep_cutoff_period, sweep_damp_period, sweep_vol_period`
        - Address 15: `cfg`

        The registers are initialized to all zeros at reset.
        The frequency registers are in a kind of floating point format:
          - Oscillator periods are 13 bits: 4 bits exponent + 9 bits mantissa
          - Cutoff, damping, and volume periods are 9 bits: 4 bits octave + 5 bits period
          - Sweep periods are 8 bits signed: 1 bit sign + 4 bits octave + 3 bits mantissa

        Increasing the octave by one doubles the period.
        The volume depends on the ratio between the cutoff and volume periods (not their float representations).
        The damping depends on the ratio between the cutoff and damping periods (not their float representations).
        As the damping period gets longer than the cutoff period, resonance increases around the cutoff frequency.
        If damping is low and/or volume is high, the filter will begin to saturate.

        Each sweep will increase or decrease the connected period.
        Setting the exponent in any period to the max value of 15 achieves a frequency of zero. This is the state upon reset.

        The `cfg` register contains
        - Bits 0-1: Waveform for oscillator 0: 0 = pulse, 1 = square, 2 = noise, 3 = saw
        - Bits 2-3: Waveform for oscillator 1
        - Bits 4-5: Unused
        - Bits 6-7: Filter mode for oscillator 1 and 2, 0 = 1st order falloff, 1 = 2nd order falloff

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - write data bit 0
    - write data bit 1
    - write data bit 2
    - write data bit 3
    - write data bit 4
    - write data bit 5
    - write data bit 6
    - write data bit 7
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - sample bit 0
    - sample bit 1
    - sample bit 2
    - sample bit 3
    - sample bit 4
    - sample bit 5
    - sample bit 6
    - sample bit 7
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - write address bit 0
    - write address bit 1
    - write address bit 2
    - write address bit 3
    - unused
    - unused
    - PWM output
    - write strobe

# The following fields are optional
  tag:          "music, filter, sound, pwm"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "audio plug to connect to audio input, voltage divider to protect it!"      # Describe any external hardware needed
  discord:      "toivoh"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/toivoh/tt05-synth/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     50000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
